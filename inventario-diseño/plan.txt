Plan de Trabajo: Sistema de Inventario para Bebidas y Desayunos
I. Conceptos Clave del Sistema (Alto Nivel)
Para este sistema, los conceptos fundamentales giran en torno a la gestión eficiente de recursos y la operativa de un negocio de alimentos y bebidas:

Gestión de Inventario Granular: No solo controlar productos finales, sino los ingredientes que los componen, lo que implica un modelo de datos robusto para productos base y recetas.
Automatización de Descuentos: El sistema debe manejar automáticamente la baja de múltiples ingredientes del inventario al vender una receta.
Alertas Proactivas: Capacidad de notificar sobre la baja existencia de productos, un pilar para evitar la falta de stock y pérdidas de ventas.
Roles y Permisos: Diferenciar las capacidades de los usuarios (empleados) (ej., administradores, personal de inventario, cajeros) para asegurar la integridad de los datos y la seguridad.
Registro de Transacciones: Mantener un historial de ventas y movimientos de inventario para auditoría y análisis.
Persistencia de Datos: La información del inventario, ventas y empleados debe guardarse de forma segura y cargarse al reiniciar la aplicación.
II. Caja de Herramientas de Rust Esencial
Aquí están las herramientas y conceptos específicos de Rust que utilizaremos para construir un sistema robusto y modular:

Modularidad y Bajo Acoplamiento (Traits & Módulos):
Módulos (mod): Organizaremos el código en módulos lógicos (ej., domain, repositories, services, cli).
Traits: Fundamentales para definir interfaces y lograr bajo acoplamiento. Por ejemplo, trait ProductRepository que define cómo interactuar con los datos de productos, permitiendo múltiples implementaciones (JSON, en memoria para tests, futura base de datos).
Estructuras de Datos (struct y enum): Modelaremos todas las entidades del negocio (Producto, Receta, Venta, Empleado, etc.).
Manejo de Errores (Result<T, E>, ?): Utilizaremos el sistema de errores de Rust para gestionar fallos de forma explícita y segura. Podríamos definir tipos de error personalizados para el dominio.
Serialización/Deserialización (serde): Para guardar y cargar nuestros datos de objetos en archivos (inicialmente JSON).
Colecciones de Datos (HashMap, Vec): Para almacenar y acceder eficientemente a nuestros productos, recetas y empleados. HashMap será clave para búsquedas rápidas por ID.
Fechas y Horas (chrono): Para registrar timestamps en ventas y gestionar gastos fijos.
III. Patrones de Diseño (Alto Nivel)
Aunque no aplicaremos patrones complejos como CQRS o Event Sourcing de entrada, usaremos patrones fundamentales para la modularidad:

Capas Arquitectónicas: Dividiremos la aplicación en capas claras:
Dominio: Contiene la lógica de negocio central (reglas, entidades).
Servicios (Aplicación): Orquestra las operaciones de negocio, utilizando la lógica del dominio y los repositorios.
Repositorios (Infraestructura): Encapsula la lógica de persistencia de datos (cómo se guardan y cargan las entidades).
Presentación (CLI): La interfaz de usuario que interactúa con los servicios.
Inyección de Dependencias (mediante traits): Los servicios dependerán de traits de repositorio, no de implementaciones concretas, permitiendo flexibilidad y facilidad de prueba.
IV. Seguridad con Hashing en Login
Contraseñas Hasheadas: Almacenaremos las contraseñas de los empleados usando funciones de hashing seguras (ej., Argon2 o Bcrypt si usamos una crate, o SHA-256 como primera aproximación para entender el concepto). Nunca guardarlas en texto plano.
Roles: Implementaremos un sistema de roles simple para la autorización, definiendo qué acciones puede realizar cada tipo de empleado.
V. Concurrencia de Datos (Consideración Futura)
Para el demo inicial, la aplicación será monohilo y operará de forma secuencial.
Si en el futuro el sistema necesita manejar múltiples usuarios simultáneamente o tareas en segundo plano, exploraremos conceptos como:
Hilos (std::thread): Para ejecutar código en paralelo.
Mutex / RwLock: Para gestionar el acceso seguro y concurrente a los datos compartidos en memoria.
Programación Asíncrona (tokio / async-std): Para operaciones de I/O que no bloqueen el hilo principal (ej., si se conecta a una base de datos o API externa).
VI. Pruebas
Pruebas Unitarias: Para verificar que las funciones individuales y la lógica de negocio (ej., el descuento de ingredientes) funcionan correctamente.
Pruebas de Integración: Para asegurar que los diferentes módulos (servicios, repositorios) se comunican y operan bien en conjunto.
Mocks/Fakes: Utilizaremos implementaciones en memoria de nuestros traits de repositorio para aislar la lógica de negocio durante las pruebas unitarias.
VII. Demo Básica: Inventario y Alertas
El objetivo del demo es mostrar la funcionalidad central de control de stock y aviso.

Funcionalidades del Demo:
Registro de Productos: Permitir añadir nuevos productos con nombre, cantidad inicial y un umbral de stock_minimo_alerta.
Listado de Inventario: Mostrar el estado actual de todos los productos en el inventario.
Venta Simplificada de Recetas:
Tener 2-3 recetas predefinidas (ej. "Café Simple", "Jugo de Naranja").
Al "vender" una receta, el sistema descuenta los ingredientes correspondientes del inventario.
Validación de Stock: Si no hay suficientes ingredientes, la venta no procede y se notifica al usuario.
Alertas de Bajo Stock: Mostrar una lista de productos que han alcanzado o superado su stock_minimo_alerta.
Persistencia: Guardar y cargar el inventario en un archivo JSON para que los cambios persistan.
Interfaz: Una aplicación de línea de comandos (CLI) simple con un menú de opciones (ej. "1. Ver Inventario", "2. Registrar Venta", "3. Ver Alertas", "4. Salir").
VIII. Plan de Trabajo Detallado (Para ti y tu Colaborador)
Este plan está diseñado para ser iterativo, construyendo funcionalidades paso a paso.

Fase 1: Configuración y Modelado Básico (1-2 días)
Inicializar Proyecto Rust: Crear un nuevo proyecto (cargo new inventory_system).
Estructura de Carpetas/Módulos:
src/main.rs (punto de entrada, CLI)
src/domain/mod.rs (definición de structs: Producto, IngredienteReceta, Receta, Error)
src/repositories/mod.rs (definición de traits de repositorio)
src/services/mod.rs (definición de traits de servicios)
Definir Entidades del Dominio:
Crea los structs para Producto y Receta con sus campos esenciales (ID, nombre, cantidad/ingredientes, stock mínimo).
Define un enum básico para Error con al menos NotFound y InsufficientStock.
Configuración Básica: Utiliza la crate config para cargar la ruta del archivo de datos JSON y dotenv para variables de entorno en desarrollo.
Logging Básico: Integra log y env_logger para mensajes informativos.
Fase 2: Persistencia y CRUD de Inventario (2-3 días)
Trait ProductRepository: Define el trait en src/repositories/mod.rs con métodos para get_by_id, save, get_all, etc.
Implementación JSON de ProductRepository: Crea un struct JsonProductRepository que implemente el trait y use serde_json para leer/escribir del archivo JSON.
Servicio de Inventario (InventoryService):
Crea un struct InventoryService en src/services/mod.rs que tome una instancia de dyn ProductRepository (mediante Box<dyn ProductRepository>) en su constructor.
Implementa métodos para añadir productos y listar todos los productos.
CLI Básica: En src/main.rs, crea un bucle de menú que permita:
Cargar el inventario desde el archivo al inicio.
Añadir un nuevo producto.
Listar el inventario actual.
Guardar los cambios al salir.
Fase 3: Recetas y Lógica de Descuento (3-4 días)
Definir Receta y IngredienteReceta: Asegúrate de que tu struct Receta en src/domain/mod.rs pueda contener una lista de IngredienteReceta.
Trait RecipeRepository: Similar a ProductRepository, define un trait para gestionar recetas.
Implementación JSON de RecipeRepository: Crea un struct JsonRecipeRepository.
Lógica de Dominio para Descuento: En src/domain/mod.rs, implementa una función (o método asociado a Receta) que:
Tome un HashMap<String, Producto> (el inventario) y una Receta.
Verifique si hay suficiente stock de todos los ingredientes.
Si hay, descuente las cantidades necesarias del inventario.
Retorne un Result indicando éxito o un error de InsufficientStock.
Actualizar InventoryService (o crear SaleService):
Añade un método al InventoryService (o crea un nuevo SaleService si prefieres una separación más estricta para ventas) que:
Tome una Receta y una cantidad.
Use la lógica de dominio para descontar los ingredientes.
Actualice el inventario usando el ProductRepository.
Actualizar CLI para Venta:
Añade una opción para "Vender Receta".
Permite al usuario elegir una receta (ej., por su ID) y una cantidad.
Muestra el resultado de la venta (éxito o error por falta de stock).
Fase 4: Alertas y Demo Final (2-3 días)
Lógica de Alertas: En src/domain/mod.rs o en InventoryService, implementa una función para obtener_productos_bajo_stock().
Integrar Alertas en CLI:
Añade una opción de menú para "Ver Alertas de Bajo Stock".
Al inicio del programa (después de cargar el inventario), muestra un resumen si hay alertas.
Pruebas Básicas:
Escribe pruebas unitarias para la lógica de descuento de ingredientes.
Escribe una prueba de integración para el flujo de añadir producto y listarlo.
Refinamiento y Demo:
Asegúrate de que los mensajes en la CLI sean claros.
Prepara datos iniciales en tu archivo JSON para una demostración fluida.
Practica el flujo de la demo.

